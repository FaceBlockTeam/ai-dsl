@article{FARMER2008267,
  title           = {The seven virtues of simple type theory},
  journal         = {Journal of Applied Logic},
  volume          = 6,
  number          = 3,
  pages           = {267-286},
  year            = 2008,
  issn            = {1570-8683},
  doi             = {https://doi.org/10.1016/j.jal.2007.11.001},
  url             =
                  {https://www.sciencedirect.com/science/article/pii/S157086830700081X},
  author          = {William M. Farmer},
  keywords        = {Higher-order logic, Type theory, Practical logics,
                  Nonstandard models, Peano arithmetic, Complete ordered field},
  abstract        = {Simple type theory, also known as higher-order logic, is a
                  natural extension of first-order logic which is simple,
                  elegant, highly expressive, and practical. This paper surveys
                  the virtues of simple type theory and attempts to show that
                  simple type theory is an attractive alternative to first-order
                  logic for practical-minded scientists, engineers, and
                  mathematicians. It recommends that simple type theory be
                  incorporated into introductory logic courses offered by
                  mathematics departments and into the undergraduate curricula
                  for computer science and software engineering students.}
}

@misc{GoertzelGeisweillerBlog,
  author          = {Ben Goertzel, Nil Geisweiller},
  title           = {AI-DSL: Toward a General-Purpose Description Language for
                  AI Agents},
  url             =
                  {https://blog.singularitynet.io/ai-dsl-toward-a-general-purpose-description-language-for-ai-agents-21459f691b9e}
}

@InProceedings{Rabe2006,
  author          = "Rabe, Florian",
  editor          = "Furbach, Ulrich and Shankar, Natarajan",
  title           = "First-Order Logic with Dependent Types",
  booktitle       = "Automated Reasoning",
  year            = 2006,
  publisher       = "Springer Berlin Heidelberg",
  address         = "Berlin, Heidelberg",
  pages           = "377--391",
  abstract        = "We present DFOL, an extension of classical first-order
                  logic with dependent types, i.e., as in Martin-L{\"o}f type
                  theory, signatures may contain type-valued function symbols. A
                  model theory for the logic is given that stays close to the
                  established first-order model theory. The logic is presented
                  as an institution, and the logical framework LF is used to
                  define signatures, terms and formulas. We show that free
                  models over Horn theories exist, which facilitates its use as
                  an algebraic specification language, and show that the
                  classical first-order axiomatization is complete for DFOL,
                  too, which implies that existing first-order theorem provers
                  can be extended. In particular, the axiomatization can be
                  encoded in LF.",
  isbn            = "978-3-540-37188-5"
}

@proceedings{YvesHellenschmidt2002,
  author          = {Yves Forkl, Michael Hellenschmidt},
  location        = {Kloster Irsee, Germany},
  pages           = {17--21},
  publisher       = {Fraunhofer Institute},
  series          = {Tutorial and Research Workshop on Multi-Modal Dialogue in
                  Mobile Environments},
  title           = {Mastering agent communication in EMBASSI on the basis of a
                  formal ontology},
  year            = 2002
}

@inproceedings{brady_resource-dependent_2015,
  address         = {Cham},
  title           = {Resource-{Dependent} {Algebraic} {Effects}},
  isbn            = {978-3-319-14675-1},
  abstract        = {There has been significant interest in recent months in
                  finding new ways to implement composable and modular effectful
                  programs using handlers of algebraic effects. In my own
                  previous work, I have shown how an algebraic effect system
                  (called effects) can be embedded directly in a dependently
                  typed host language. Using dependent types ought to allow
                  precise reasoning about programs; however, the reasoning
                  capabilities of effects have been limited to simple state
                  transitions which are known at compile-time. In this paper, I
                  show how effects can be extended to support reasoning in the
                  presence of run-time state transitions, where the result may
                  depend on run-time information about resource usage (e.g.
                  whether opening a file succeeded). I show how this can be used
                  to build expressive APIs, and to specify and verify the
                  behaviour of interactive, stateful programs. I illustrate the
                  technique using a file handling API, and an interactive game.},
  booktitle       = {Trends in {Functional} {Programming}},
  publisher       = {Springer International Publishing},
  author          = {Brady, Edwin},
  editor          = {Hage, Jurriaan and McCarthy, Jay},
  year            = 2015,
  pages           = {18--33},
  file            =
                  {Brady.2014.RewourceDependentAlgebraicEffects.pdf:/home/kabir/vveitas@gmail.com/library/ai-dsl/Brady.2014.RewourceDependentAlgebraicEffects.pdf:application/pdf},
}

@article{gruber_translation_1993,
  title           = {A translation approach to portable ontology specifications},
  volume          = 5,
  issn            = {1042-8143},
  url             =
                  {https://www.sciencedirect.com/science/article/pii/S1042814383710083},
  doi             = {https://doi.org/10.1006/knac.1993.1008},
  abstract        = {To support the sharing and reuse of formally represented
                  knowledge among AI systems, it is useful to define the common
                  vocabulary in which shared knowledge is represented. A
                  specification of a representational vocabulary for a shared
                  domain of discourse—definitions of classes, relations,
                  functions, and other objects—is called an ontology. This paper
                  describes a mechanism for defining ontologies that are
                  portable over representation systems. Definitions written in a
                  standard format for predicate calculus are translated by a
                  system called Ontolingua into specialized representations,
                  including frame-based systems as well as relational languages.
                  This allows researchers to share and reuse ontologies, while
                  retaining the computational benefits of specialized
                  implementations. We discuss how the translation approach to
                  portability addresses several technical problems. One problem
                  is how to accommodate the stylistic and organizational
                  differences among representations while preserving declarative
                  content. Another is how to translate from a very expressive
                  language into restricted languages, remaining
                  system-independent while preserving the computational
                  efficiency of implemented systems. We describe how these
                  problems are addressed by basing Ontolingua itself on an
                  ontology of domain-independent, representational idioms.},
  number          = 2,
  journal         = {Knowledge Acquisition},
  author          = {Gruber, Thomas R.},
  year            = 1993,
  pages           = {199--220},
  file            =
                  {Gruber.1993.ATranslationApproachToPortableOntologySpecifications.pdf:/home/kabir/vveitas@gmail.com/library/ai-dsl/Gruber.1993.ATranslationApproachToPortableOntologySpecifications.pdf:application/pdf},
}

@misc{martin_translations_nodate,
  author          = {Martin, Philippe},
  file            = {Translations between RDF+OWL, N3, KIF, UML, FL, FCG and
                  FE:/home/kabir/Zotero/storage/JQ9VDTGT/comparisons.html:text/html},
  language        = {English},
  title           = {Translations between {RDF}+{OWL}, {N3}, {KIF}, {UML}, {FL},
                  {FCG} and {FE}},
  url             = {http://www.webkb.org/doc/model/comparisons.html},
  urldate         = {2021-05-12}
}

@misc{nunet_nunet_2021,
  title           = {{NuNet} architecture and service discovery principles (for
                  {AI}-{DSL})},
  url             = {https://www.youtube.com/watch?v=GKH9C8pb3yw},
  urldate         = {2021-05-26},
  author          = {{NuNet}},
  month           = may,
  year            = 2021,
}

@InCollection{sep-logic-ontology,
  author          = {Hofweber, Thomas},
  title           = {{Logic and Ontology}},
  booktitle       = {The {Stanford} Encyclopedia of Philosophy},
  editor          = {Edward N. Zalta},
  howpublished    =
                  {\url{https://plato.stanford.edu/archives/spr2021/entries/logic-ontology/}},
  year            = 2021,
  edition         = {{S}pring 2021},
  publisher       = {Metaphysics Research Lab, Stanford University}
}

@misc{singularitynet_foundation_phasetwo_2021,
  title           = {{PhaseTwo} {Information} {Memorandum}},
  url             = {https://rebrand.ly/SNPhase2},
  language        = {English},
  publisher       = {SingularityNET Foundation},
  author          = {SingularityNET Foundation},
  month           = feb,
  year            = 2021,
}
